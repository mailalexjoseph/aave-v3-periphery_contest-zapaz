1,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,40:5,"require(_authorizedClaimers[user] == claimer, 'CLAIMER_UNAUTHORIZED')",assert(true)
2,RequireMutation,contracts/rewards/RewardsController.sol,40:13,_authorizedClaimers[user] == claimer,true
3,RequireMutation,contracts/rewards/RewardsController.sol,40:13,_authorizedClaimers[user] == claimer,false
4,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,83:7,config[i].totalSupply = IScaledBalanceToken(config[i].asset).scaledTotalSupply(),assert(true)
5,AssignmentMutation,contracts/rewards/RewardsController.sol,83:31,IScaledBalanceToken(config[i].asset).scaledTotalSupply(),0
6,AssignmentMutation,contracts/rewards/RewardsController.sol,83:31,IScaledBalanceToken(config[i].asset).scaledTotalSupply(),1
7,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,86:7,"_installTransferStrategy(config[i].reward, config[i].transferStrategy)",assert(true)
8,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,89:7,"_setRewardOracle(config[i].reward, config[i].rewardOracle)",assert(true)
9,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,81:25,i < config.length,config.length < i
10,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,81:44,i++,assert(true)
11,UnaryOperatorMutation,contracts/rewards/RewardsController.sol,81:45,++,--
12,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,91:5,_configureAssets(config),assert(true)
13,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,99:5,"_installTransferStrategy(reward, transferStrategy)",assert(true)
14,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,107:5,"_setRewardOracle(reward, rewardOracle)",assert(true)
15,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,116:5,"_updateData(msg.sender, user, userBalance, totalSupply)",assert(true)
16,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,126:5,"require(to != address(0), 'INVALID_TO_ADDRESS')",assert(true)
17,RequireMutation,contracts/rewards/RewardsController.sol,126:13,to != address(0),true
18,RequireMutation,contracts/rewards/RewardsController.sol,126:13,to != address(0),false
19,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,138:5,"require(user != address(0), 'INVALID_USER_ADDRESS')",assert(true)
20,RequireMutation,contracts/rewards/RewardsController.sol,138:13,user != address(0),true
21,RequireMutation,contracts/rewards/RewardsController.sol,138:13,user != address(0),false
22,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,139:5,"require(to != address(0), 'INVALID_TO_ADDRESS')",assert(true)
23,RequireMutation,contracts/rewards/RewardsController.sol,139:13,to != address(0),true
24,RequireMutation,contracts/rewards/RewardsController.sol,139:13,to != address(0),false
25,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,158:5,"require(to != address(0), 'INVALID_TO_ADDRESS')",assert(true)
26,RequireMutation,contracts/rewards/RewardsController.sol,158:13,to != address(0),true
27,RequireMutation,contracts/rewards/RewardsController.sol,158:13,to != address(0),false
28,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,173:5,"require(user != address(0), 'INVALID_USER_ADDRESS')",assert(true)
29,RequireMutation,contracts/rewards/RewardsController.sol,173:13,user != address(0),true
30,RequireMutation,contracts/rewards/RewardsController.sol,173:13,user != address(0),false
31,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,174:5,"require(to != address(0), 'INVALID_TO_ADDRESS')",assert(true)
32,RequireMutation,contracts/rewards/RewardsController.sol,174:13,to != address(0),true
33,RequireMutation,contracts/rewards/RewardsController.sol,174:13,to != address(0),false
34,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,189:5,_authorizedClaimers[user] = caller,assert(true)
35,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,205:5,userAssetBalances = new RewardsDataTypes.UserAssetBalance[](assets.length),assert(true)
36,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,207:7,userAssetBalances[i].asset = assets[i],assert(true)
37,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,206:25,i < assets.length,assets.length < i
38,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,206:44,i++,assert(true)
39,UnaryOperatorMutation,contracts/rewards/RewardsController.sol,206:45,++,--
40,IfStatementMutation,contracts/rewards/RewardsController.sol,233:9,amount == 0,true
41,IfStatementMutation,contracts/rewards/RewardsController.sol,233:9,amount == 0,false
42,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,238:5,"_updateDataMultiple(user, _getUserAssetBalances(assets, user))",assert(true)
43,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,241:7,totalRewards += _assets[asset].rewards[reward].usersData[user].accrued,assert(true)
44,AssignmentMutation,contracts/rewards/RewardsController.sol,241:23,_assets[asset].rewards[reward].usersData[user].accrued,0
45,AssignmentMutation,contracts/rewards/RewardsController.sol,241:23,_assets[asset].rewards[reward].usersData[user].accrued,1
46,IfStatementMutation,contracts/rewards/RewardsController.sol,243:11,totalRewards <= amount,true
47,IfStatementMutation,contracts/rewards/RewardsController.sol,243:11,totalRewards <= amount,false
48,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,243:11,totalRewards <= amount,amount <= totalRewards
49,BinaryOpMutation,contracts/rewards/RewardsController.sol,246:42, - ,+
50,BinaryOpMutation,contracts/rewards/RewardsController.sol,246:42, - ,*
51,BinaryOpMutation,contracts/rewards/RewardsController.sol,246:42, - ,/
52,BinaryOpMutation,contracts/rewards/RewardsController.sol,246:42, - ,%
53,BinaryOpMutation,contracts/rewards/RewardsController.sol,246:42, - ,**
54,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,246:30,totalRewards - amount,amount - totalRewards
55,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,247:9,totalRewards -= difference,assert(true)
56,AssignmentMutation,contracts/rewards/RewardsController.sol,247:25,difference,0
57,AssignmentMutation,contracts/rewards/RewardsController.sol,247:25,difference,1
58,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,248:9,_assets[asset].rewards[reward].usersData[user].accrued = difference.toUint128(),assert(true)
59,AssignmentMutation,contracts/rewards/RewardsController.sol,248:66,difference.toUint128(),0
60,AssignmentMutation,contracts/rewards/RewardsController.sol,248:66,difference.toUint128(),1
61,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,244:9,_assets[asset].rewards[reward].usersData[user].accrued = 0,assert(true)
62,AssignmentMutation,contracts/rewards/RewardsController.sol,244:66,0,1
63,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,239:25,i < assets.length,assets.length < i
64,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,239:44,i++,assert(true)
65,UnaryOperatorMutation,contracts/rewards/RewardsController.sol,239:45,++,--
66,IfStatementMutation,contracts/rewards/RewardsController.sol,253:9,totalRewards == 0,true
67,IfStatementMutation,contracts/rewards/RewardsController.sol,253:9,totalRewards == 0,false
68,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,257:5,"_transferRewards(to, reward, totalRewards)",assert(true)
69,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,280:5,rewardsList = new address[](rewardsListLength),assert(true)
70,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,281:5,claimedAmounts = new uint256[](rewardsListLength),assert(true)
71,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,283:5,"_updateDataMultiple(user, _getUserAssetBalances(assets, user))",assert(true)
72,IfStatementMutation,contracts/rewards/RewardsController.sol,288:13,rewardsList[j] == address(0),true
73,IfStatementMutation,contracts/rewards/RewardsController.sol,288:13,rewardsList[j] == address(0),false
74,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,289:11,rewardsList[j] = _rewardsList[j],assert(true)
75,IfStatementMutation,contracts/rewards/RewardsController.sol,292:13,rewardAmount != 0,true
76,IfStatementMutation,contracts/rewards/RewardsController.sol,292:13,rewardAmount != 0,false
77,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,293:11,claimedAmounts[j] += rewardAmount,assert(true)
78,AssignmentMutation,contracts/rewards/RewardsController.sol,293:32,rewardAmount,0
79,AssignmentMutation,contracts/rewards/RewardsController.sol,293:32,rewardAmount,1
80,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,294:11,_assets[asset].rewards[rewardsList[j]].usersData[user].accrued = 0,assert(true)
81,AssignmentMutation,contracts/rewards/RewardsController.sol,294:76,0,1
82,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,287:27,j < rewardsListLength,rewardsListLength < j
83,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,287:50,j++,assert(true)
84,UnaryOperatorMutation,contracts/rewards/RewardsController.sol,287:51,++,--
85,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,285:25,i < assets.length,assets.length < i
86,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,285:44,i++,assert(true)
87,UnaryOperatorMutation,contracts/rewards/RewardsController.sol,285:45,++,--
88,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,299:7,"_transferRewards(to, rewardsList[i], claimedAmounts[i])",assert(true)
89,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,298:25,i < rewardsListLength,rewardsListLength < i
90,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,298:48,i++,assert(true)
91,UnaryOperatorMutation,contracts/rewards/RewardsController.sol,298:49,++,--
92,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,320:5,"require(success == true, 'TRANSFER_ERROR')",assert(true)
93,RequireMutation,contracts/rewards/RewardsController.sol,320:13,success == true,true
94,RequireMutation,contracts/rewards/RewardsController.sol,320:13,success == true,false
95,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,338:12,size > 0,0 > size
96,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,349:5,"require(address(transferStrategy) != address(0), 'STRATEGY_CAN_NOT_BE_ZERO')",assert(true)
97,RequireMutation,contracts/rewards/RewardsController.sol,349:13,address(transferStrategy) != address(0),true
98,RequireMutation,contracts/rewards/RewardsController.sol,349:13,address(transferStrategy) != address(0),false
99,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,350:5,"require(_isContract(address(transferStrategy)) == true, 'STRATEGY_MUST_BE_CONTRACT')",assert(true)
100,RequireMutation,contracts/rewards/RewardsController.sol,350:13,_isContract(address(transferStrategy)) == true,true
101,RequireMutation,contracts/rewards/RewardsController.sol,350:13,_isContract(address(transferStrategy)) == true,false
102,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,352:5,_transferStrategy[reward] = transferStrategy,assert(true)
103,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,365:5,"require(rewardOracle.latestAnswer() > 0, 'ORACLE_MUST_RETURN_PRICE')",assert(true)
104,RequireMutation,contracts/rewards/RewardsController.sol,365:13,rewardOracle.latestAnswer() > 0,true
105,RequireMutation,contracts/rewards/RewardsController.sol,365:13,rewardOracle.latestAnswer() > 0,false
106,SwapArgumentsOperatorMutation,contracts/rewards/RewardsController.sol,365:13,rewardOracle.latestAnswer() > 0,0 > rewardOracle.latestAnswer()
107,DeleteExpressionMutation,contracts/rewards/RewardsController.sol,366:5,_rewardOracle[reward] = rewardOracle,assert(true)
